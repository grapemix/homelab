---
version: '3'

env:
  #VAULT_ADDR: https://vault.fung.house
  VAULT_TOKEN:
    sh: if [ -f {{.ROOT_DIR}}/.vault.json ] && [ -z "$VAULT_TOKEN" ]; then cat {{.ROOT_DIR}}/.vault.json | jq -r '.root_token'; fi
  SECRET_DOMAIN:
    sh: echo $VAULT_ADDR | awk -F "." '{print $2"."$3;}'
  OIDC_CLIENT_ID: vault
tasks:
  init:
    desc: initialize vault
    cmds:
      - kubectl --context {{.HOMELAB_STAGE}} -n vault exec -ti vault-0 -- vault operator init -n 1 -t 1 --format=json > {{.ROOT_DIR}}/.vault.json
  bootstrap:
    desc: bootstrap vault cluster with all auth backends, kv secrets, roles and policies
    cmds:
      # We use jobs to init and unseal the vault
      #- task vault:init
      #- task vault:unseal
      - task vault:enable-k8s-auth
      - task vault:add-policies
      - task vault:add-roles
      - task vault:add-rootca
      - task vault:add-intca
      #- task vault:enable-ldap
      - task vault:enable-kv
  status:
    desc: vault status
    cmds:
      - vault status
  unseal:
    desc: vault unseal
    cmds:
      - kubectl -n secret exec -ti vault-0 -- vault operator unseal $( cat {{.ROOT_DIR}}/.vault.json | jq -r '.unseal_keys_b64[0]')
  # ca
  add-rootca:
    desc: setup root ca pki engine
    cmds:
      - vault secrets enable -path=pki/root_ca pki || true
      - vault secrets tune -max-lease-ttl=87600h pki/root_ca
      - vault write -field=certificate pki/root_ca/root/generate/internal common_name="svc" ttl=87600h > /tmp/ca_cert.crt
      - vault write pki/root_ca/config/urls issuing_certificates="{{ .VAULT_ADDR }}/v1/pki/ca" crl_distribution_points="{{ .VAULT_ADDR }}/v1/pki/crl"
      - rm  /tmp/ca_cert.crt
  remove-intca:
    desc: remove intermediate ca pki engine for k8s cluster
    cmds:
      - vault secrets disable pki/int_ca
  add-intca:
    desc: enable intermediate ca pki engine for k8s cluster
    cmds:
      - vault secrets enable -path=pki/int_ca pki || true
      - vault secrets tune -max-lease-ttl=43800h pki/int_ca
      - vault write -format=json pki/int_ca/intermediate/generate/internal common_name="svc" | jq -r '.data.csr' > pki_intermediate.csr
      - vault write -format=json pki/root_ca/root/sign-intermediate csr=@pki_intermediate.csr format=pem_bundle ttl="43800h" | jq -r '.data.certificate' > ca.cert.pem
      - vault write pki/int_ca/intermediate/set-signed certificate=@ca.cert.pem
      - vault write pki/int_ca/roles/{{.HOMELAB_STAGE}} issuer_ref="$(vault read -field=default pki/int_ca/config/issuers)" allowed_domains="admin-{{.HOMELAB_STAGE}},remote,svc,cilium.io" allowed_uri_sans="admin-{{.HOMELAB_STAGE}},remote,clustermesh-apiserver" allow_bare_domains=true allow_subdomains=true max_ttl="720h"
      - kubectl --context {{.HOMELAB_STAGE}} -n cert-manager delete secret vault-root-ca || true
      - kubectl --context {{.HOMELAB_STAGE}} -n cert-manager create secret generic vault-root-ca --from-file=ca.cert.pem=ca.cert.pem || true
      - rm ca.cert.pem
      - rm pki_intermediate.csr
  # oidc
  enable-oidc-provider:
    cmds:
      #- vault write identity/oidc/provider/default
      #    allowed_client_ids="*"
 
      - echo -e "path \"secret/usr/*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"] }" | vault policy write oidcmgr -
      - echo -e "path \"secret/usr/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write oidcreader -
      - vault auth enable oidc

      - echo "Create OIDC Reader Role"
      - vault write auth/oidc/role/oidcreader
          user_claim="sub"
          bound_audiences={{.OIDC_CLIENT_ID}}
          allowed_redirect_uris="{{.VAULT_ADDR}}/ui/vault/auth/oidc/oidc/callback"
          allowed_redirect_uris="{{.VAULT_ADDR}}/oidc/callback"
          oidc_scopes="openid,profile,groups,email"
          policies="oidcreader"
          ttl=168h

      - (export VAULT_OAUTH_CLIENT_SECRET=$(vault kv get -mount=secret -field=VAULT_OAUTH_CLIENT secret/vault);
        vault write auth/oidc/config
          oidc_discovery_url="https://auth.{{.SECRET_DOMAIN}}"
          oidc_client_id="{{.OIDC_CLIENT_ID}}"
          oidc_client_secret="${VAULT_OAUTH_CLIENT_SECRET}"
          default_role="oidcreader")

      - echo "Create OIDC Mgr Role"
      - vault write auth/oidc/role/oidcmgr
          bound_audiences="{{.OIDC_CLIENT_ID}}"
          allowed_redirect_uris="{{.VAULT_ADDR}}/ui/vault/auth/oidc/oidc/callback"
          allowed_redirect_uris="{{.VAULT_ADDR}}/oidc/callback"
          user_claim="sub"
          token_policies="oidcreader"
          oidc_scopes="openid,profile,groups,email"
          groups_claim="groups"

      - echo "Write oidcmgr grp iden"
      - vault write identity/group name="oidcmgr" type="external"
          policies="oidcmgr"
          metadata=responsibility="Manage OIDC K/V Secrets"

      - echo "Write manager grp iden alias"
      - (export GROUP_ID=$(vault read -field=id identity/group/name/oidcmgr)
        OIDC_AUTH_ACCESSOR=$(vault auth list -format=json  | jq -r '."oidc/".accessor')
        vault write identity/group-alias name="oidcmgr"
          mount_accessor="${OIDC_AUTH_ACCESSOR}"
          canonical_id="${GROUP_ID}")

      - echo "enable oidc as 1st option in ui"
      - vault write sys/auth/oidc/tune listing_visibility="unauth"

  # ldap (not used)
  enable-ldap:
    desc: configure vault ldap auth
    cmds:
      - vault auth disable ldap
      - vault auth enable ldap
      - vault write auth/ldap/config
          url="ldaps://glauth.{{ .SECRET_DOMAIN }}"
          userattr=uid
          userdn="ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          discoverdn=true
          groupdn="ou=groups,{{.LLDAP_LDAP_BASE_DN}}"
          groupfilter='(member={{printf "{{.UserDN}}"}})'
          groupattr="cn"
          binddn="uid=admin,ou=people,{{.LLDAP_LDAP_BASE_DN}}"
          bindpass="{{.LLDAP_LDAP_USER_PASS}}"
          insecure_tls=false
          starttls=true
      - echo "path \"*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"] }" | vault policy write admin -
      - vault write auth/ldap/groups/vault-admin policies=admin
  # k8s auth backend
  enable-k8s-auth:
    desc: configure vault k8s auth
    cmds:
      - vault auth disable kubernetes/{{.HOMELAB_STAGE}} || true
      - vault auth enable -path=kubernetes/{{.HOMELAB_STAGE}} kubernetes || true
      - kubectl --context {{.HOMELAB_STAGE}} -n kube-system apply -f {{.ROOT_DIR}}/kubernetes/flux/vault-auth.yaml
      - kubectl --context {{.HOMELAB_STAGE}} -n kube-system get secret vault-auth-token -o jsonpath="{.data['ca\.crt']}" | base64 -d > ca.crt
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/config
          token_reviewer_jwt="$(kubectl --context {{.HOMELAB_STAGE}} -n kube-system get secret vault-auth-token -o jsonpath=\"{.data.token}\" | base64 -d; echo)"
          kubernetes_host="$(kubectl --context {{.HOMELAB_STAGE}} config view --minify | yq e '.clusters[].cluster.server')"
          kubernetes_ca_cert=@ca.crt
          disable_iss_validation=true
      - rm ca.crt
  add-policies:
    desc: add policies
    cmds:      
      - echo -e "path \"secret/data/kube-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write kube-system -
      - echo -e "path \"pki/int_ca/sign/alpha\" { capabilities = [\"update\"] } " | vault policy write alpha -
      - echo -e "path \"pki/int_ca/sign/prod\" { capabilities = [\"update\"] } " | vault policy write prod -
      - echo -e "path \"secret/data/flux-system/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write flux-system -
      - echo -e "path \"pki/int_ca/sign/default\" { capabilities = [\"update\"] }\npath \"secret/data/cert-manager/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write cert-manager -
      #- echo -e "path \"secret/data/ingress/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write ingress -
      ###############################################################
      - echo -e "path \"secret/data/monitor/*\" { capabilities = [\"read\", \"list\"] }\npath \"sys/metrics\" { capabilities = [\"read\", \"list\"] }" | vault policy write monitor -
      - echo -e "path \"secret/data/stor/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write stor -
      - echo -e "path \"secret/data/backup/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write backup -
      - echo -e "path \"secret/data/db/*\" { capabilities = [\"read\", \"list\"] } " | vault policy write db -
      - echo -e "path \"secret/data/net/*\" { capabilities = [\"read\", \"list\"] } " | vault policy write net -
      - echo -e "path \"secret/data/iot/*\" { capabilities = [\"read\", \"list\"] } " | vault policy write iot -
      ###############################################################
      - echo -e "path \"secret/data/auth/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write auth -
      - echo -e "path \"secret/data/bang/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write bang -
      - echo -e "path \"secret/data/castle/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write castle -
      - echo -e "path \"secret/data/dev/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write dev -
      - echo -e "path \"secret/data/media/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write media -
      - echo -e "path \"secret/data/secret/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write secret -
      - echo -e "path \"secret/data/security/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write security -
      - echo -e "path \"secret/data/warez/*\" { capabilities = [\"read\", \"list\"] }" | vault policy write warez -
  add-roles:
    desc: add k8s roles
    cmds:
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/kube-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=kube-system
          policies=kube-system,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/cert-manager
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=cert-manager
          policies=cert-manager,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/flux-system
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=flux-system
          policies=flux-system,security,default,auth,dev,monitor,media,net,secret,warez
          ttl=1h
      #
      #- vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/ingress
      #    bound_service_account_names=vault-auth
      #    bound_service_account_namespaces=ingress
      #    policies=ingress,default
      #    ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/vault-issuer
          bound_service_account_names=vault-issuer
          bound_service_account_namespaces=kube-system
          policies={{.HOMELAB_STAGE}},default
          ttl=1h
      ###############################################################
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/backup
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=backup
          policies=backup,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/monitor
          bound_service_account_names=vault-auth,kube-prometheus-stack-prometheus,vmagent-victoria-metrics
          bound_service_account_namespaces=monitor
          policies=backup,monitor,net,flux-system,stor,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/stor
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=stor
          policies=backup,net,security,stor,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/db
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=db
          policies=backup,db,media,castle,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/net
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=net
          policies=backup,castle,iot,net,default
          ttl=1h
      ###############################################################
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/auth
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=auth,flux-system
          policies=auth,backup,db,default,dev,monitor,media,net,secret,warez
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/bang
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=bang
          policies=backup,bang,db,default,net
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/castle
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=castle
          policies=backup,dev,db,castle,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/dev
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=dev
          policies=backup,dev,db,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/media
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=media
          policies=backup,media,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/secret
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=secret
          policies=backup,secret,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/security
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=security
          policies=backup,security,net,default
          ttl=1h
      - vault write auth/kubernetes/{{.HOMELAB_STAGE}}/role/warez
          bound_service_account_names=vault-auth
          bound_service_account_namespaces=warez
          policies=backup,db,net,warez,default
          ttl=1h

  # kv
  disable-kv:
    desc: disable kv secrets engine
    cmds:
      - vault secrets disable secret
  enable-kv:
    desc: enable kv secrets engine
    cmds:
      - vault secrets enable -path=secret kv-v2

  generate-env-file:
    desc: regenerate env file from vault kv secrets
    vars:
      SECRET_PATH: secret/
      OUTPUT_FILE: .env
    cmds:
    - echo "" > {{.OUTPUT_FILE}}      
    # vault kv secrets
    - |
      function traverse {
        local path="$1"
        vault_keys=$(vault kv list -format=json $1 2>&1)
        for secret in $(echo "$vault_keys" | jq -r '.[]'); do
          if [[ "$secret" == */ ]]; then
            traverse "$path$secret"
          else
            echo "# $path$secret" >> {{.OUTPUT_FILE}}
            vault kv get -format=yaml "$path$secret" | yq '.data.data' | sed 's/: /=/' >> {{.OUTPUT_FILE}}
            echo "" >> {{.OUTPUT_FILE}}
          fi
        done
      }
      traverse {{.SECRET_PATH}}
  # db
  disable-db-engine:
    desc: disable vault database engine
    cmds:
      - vault secrets disable databases
  enable-db-engine:
    desc: enable vault database engine
    cmds:
      - vault secrets enable -path=databases database
  add-db-connections:
    desc: add vault db connections
    cmds:
      # postgresql/home_assistant
      - vault write databases/config/home_assistant
          plugin_name="postgresql-database-plugin"
          allowed_roles="home-assistant"
          connection_url="postgresql://{{`{{username}}`}}:{{`{{password}}`}}@home-assistant-rw.castle:5432/home_assistant"
          username="postgres"
          password="{{.HASS_POSTGRES_PASSWORD}}"
          username_template="{{`{{.RoleName}}`}}-{{`{{random 8}}`}}"
      - vault write databases/roles/home-assistant
          db_name="home_assistant"
          creation_statements="CREATE ROLE \"{{`{{name}}`}}\" WITH LOGIN PASSWORD '{{`{{password}}`}}' VALID UNTIL '{{`{{expiration}}`}}'; GRANT role_home_assistant TO \"{{`{{name}}`}}\"; SET ROLE role_home_assistant;"
          revocation_statements="REVOKE role_home_assistant FROM \"{{`{{name}}`}}\"; DROP ROLE \"{{`{{name}}`}}\";"
          default_ttl="1h"
          max_ttl="1h"
  export:
    cmds:
      - medusa export secret
